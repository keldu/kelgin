source/graphics.cpp: In function 'gin::ErrorOr<gin::RenderPlugins> gin::loadAllRenderPluginsIn(const std::filesystem::__cxx11::path&)':
source/graphics.cpp:53:133: error: no matching function for call to 'std::map<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::insert(std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>)'
   53 |   plugins.insert(std::make_pair(path.string(), RenderPlugins::Handles{std::move(lib.value()), *renderer, std::move(destroy_render)}));
      |                                                                                                                                     ^
In file included from /usr/include/c++/10.2.0/map:61,
                 from source/graphics.h:10,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/bits/stl_map.h:629:7: note: candidate: 'std::map<_Key, _Tp, _Compare, _Alloc>::insert_return_type std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::node_type&&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; std::map<_Key, _Tp, _Compare, _Alloc>::insert_return_type = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::insert_return_type; std::map<_Key, _Tp, _Compare, _Alloc>::node_type = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::node_type]'
  629 |       insert(node_type&& __nh)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:629:26: note:   no known conversion for argument 1 from 'std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>' to 'std::map<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::node_type&&' {aka 'std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::node_type&&'}
  629 |       insert(node_type&& __nh)
      |              ~~~~~~~~~~~~^~~~
/usr/include/c++/10.2.0/bits/stl_map.h:634:7: note: candidate: 'std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator, std::map<_Key, _Tp, _Compare, _Alloc>::node_type&&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::iterator; std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::const_iterator; std::map<_Key, _Tp, _Compare, _Alloc>::node_type = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::node_type]'
  634 |       insert(const_iterator __hint, node_type&& __nh)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:634:7: note:   candidate expects 2 arguments, 1 provided
/usr/include/c++/10.2.0/bits/stl_map.h:803:7: note: candidate: 'std::pair<typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator, bool> std::map<_Key, _Tp, _Compare, _Alloc>::insert(const value_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::iterator; std::map<_Key, _Tp, _Compare, _Alloc>::value_type = std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>]'
  803 |       insert(const value_type& __x)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:803:32: note:   no known conversion for argument 1 from 'std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>' to 'const value_type&' {aka 'const std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>&'}
  803 |       insert(const value_type& __x)
      |              ~~~~~~~~~~~~~~~~~~^~~
/usr/include/c++/10.2.0/bits/stl_map.h:810:7: note: candidate: 'std::pair<typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator, bool> std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::value_type&&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::iterator; std::map<_Key, _Tp, _Compare, _Alloc>::value_type = std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>]'
  810 |       insert(value_type&& __x)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:810:27: note:   no known conversion for argument 1 from 'std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>' to 'std::map<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::value_type&&' {aka 'std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>&&'}
  810 |       insert(value_type&& __x)
      |              ~~~~~~~~~~~~~^~~
/usr/include/c++/10.2.0/bits/stl_map.h:816:2: note: candidate: 'template<class _Pair> std::__enable_if_t<std::is_constructible<std::pair<const _Key, _Tp>, _Pair>::value, std::pair<typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator, bool> > std::map<_Key, _Tp, _Compare, _Alloc>::insert(_Pair&&) [with _Pair = _Pair; _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >]'
  816 |  insert(_Pair&& __x)
      |  ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:816:2: note:   template argument deduction/substitution failed:
In file included from /usr/include/c++/10.2.0/bits/move.h:57,
                 from /usr/include/c++/10.2.0/bits/stl_pair.h:59,
                 from /usr/include/c++/10.2.0/bits/stl_algobase.h:64,
                 from /usr/include/c++/10.2.0/memory:63,
                 from /usr/local/include/kelgin/common.h:4,
                 from /usr/local/include/kelgin/async.h:3,
                 from /usr/local/include/kelgin/io.h:3,
                 from source/service.h:3,
                 from source/graphics.h:3,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/type_traits: In substitution of 'template<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = std::pair<std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, bool>]':
/usr/include/c++/10.2.0/bits/stl_map.h:816:2:   required by substitution of 'template<class _Pair> std::__enable_if_t<std::is_constructible<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, _Pair>::value, std::pair<std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, bool> > std::map<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::insert<_Pair>(_Pair&&) [with _Pair = std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>]'
source/graphics.cpp:53:133:   required from here
/usr/include/c++/10.2.0/type_traits:2192:11: error: no type named 'type' in 'struct std::enable_if<false, std::pair<std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, bool> >'
 2192 |     using __enable_if_t = typename enable_if<_Cond, _Tp>::type;
      |           ^~~~~~~~~~~~~
In file included from /usr/include/c++/10.2.0/map:61,
                 from source/graphics.h:10,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/bits/stl_map.h:830:7: note: candidate: 'void std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::initializer_list<std::pair<const _Key, _Tp> >) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >]'
  830 |       insert(std::initializer_list<value_type> __list)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:830:48: note:   no known conversion for argument 1 from 'std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>' to 'std::initializer_list<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >'
  830 |       insert(std::initializer_list<value_type> __list)
      |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:860:7: note: candidate: 'std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator, const value_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::iterator; std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::const_iterator; std::map<_Key, _Tp, _Compare, _Alloc>::value_type = std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>]'
  860 |       insert(const_iterator __position, const value_type& __x)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:860:7: note:   candidate expects 2 arguments, 1 provided
/usr/include/c++/10.2.0/bits/stl_map.h:870:7: note: candidate: 'std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator, std::map<_Key, _Tp, _Compare, _Alloc>::value_type&&) [with _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::iterator; std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> > >::const_iterator; std::map<_Key, _Tp, _Compare, _Alloc>::value_type = std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>]'
  870 |       insert(const_iterator __position, value_type&& __x)
      |       ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:870:7: note:   candidate expects 2 arguments, 1 provided
/usr/include/c++/10.2.0/bits/stl_map.h:875:2: note: candidate: 'template<class _Pair> std::__enable_if_t<std::is_constructible<std::pair<const _Key, _Tp>, _Pair>::value, typename std::_Rb_tree<_Key, std::pair<const _Key, _Tp>, std::_Select1st<std::pair<const _Key, _Tp> >, _Compare, typename __gnu_cxx::__alloc_traits<_Allocator>::rebind<std::pair<const _Key, _Tp> >::other>::iterator> std::map<_Key, _Tp, _Compare, _Alloc>::insert(std::map<_Key, _Tp, _Compare, _Alloc>::const_iterator, _Pair&&) [with _Pair = _Pair; _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >]'
  875 |  insert(const_iterator __position, _Pair&& __x)
      |  ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:875:2: note:   template argument deduction/substitution failed:
source/graphics.cpp:53:133: note:   candidate expects 2 arguments, 1 provided
   53 |   plugins.insert(std::make_pair(path.string(), RenderPlugins::Handles{std::move(lib.value()), *renderer, std::move(destroy_render)}));
      |                                                                                                                                     ^
In file included from /usr/include/c++/10.2.0/map:61,
                 from source/graphics.h:10,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/bits/stl_map.h:893:2: note: candidate: 'template<class _InputIterator> void std::map<_Key, _Tp, _Compare, _Alloc>::insert(_InputIterator, _InputIterator) [with _InputIterator = _InputIterator; _Key = std::__cxx11::basic_string<char>; _Tp = gin::RenderPlugins::Handles; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles> >]'
  893 |  insert(_InputIterator __first, _InputIterator __last)
      |  ^~~~~~
/usr/include/c++/10.2.0/bits/stl_map.h:893:2: note:   template argument deduction/substitution failed:
source/graphics.cpp:53:133: note:   candidate expects 2 arguments, 1 provided
   53 |   plugins.insert(std::make_pair(path.string(), RenderPlugins::Handles{std::move(lib.value()), *renderer, std::move(destroy_render)}));
      |                                                                                                                                     ^
source/graphics.cpp: In constructor 'gin::GraphicsService::GraphicsService()':
source/graphics.cpp:59:34: error: no matching function for call to 'gin::RenderPlugins::RenderPlugins()'
   59 | GraphicsService::GraphicsService(){}
      |                                  ^
source/graphics.cpp:20:1: note: candidate: 'gin::RenderPlugins::RenderPlugins(std::map<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>&&)'
   20 | RenderPlugins::RenderPlugins(std::map<std::string, Handles>&& p):
      | ^~~~~~~~~~~~~
source/graphics.cpp:20:1: note:   candidate expects 1 argument, 0 provided
In file included from source/graphics.cpp:1:
source/graphics.h:20:7: note: candidate: 'gin::RenderPlugins::RenderPlugins(const gin::RenderPlugins&)'
   20 | class RenderPlugins {
      |       ^~~~~~~~~~~~~
source/graphics.h:20:7: note:   candidate expects 1 argument, 0 provided
source/graphics.h:20:7: note: candidate: 'gin::RenderPlugins::RenderPlugins(gin::RenderPlugins&&)'
source/graphics.h:20:7: note:   candidate expects 1 argument, 0 provided
In file included from /usr/include/c++/10.2.0/bits/stl_algobase.h:64,
                 from /usr/include/c++/10.2.0/memory:63,
                 from /usr/local/include/kelgin/common.h:4,
                 from /usr/local/include/kelgin/async.h:3,
                 from /usr/local/include/kelgin/io.h:3,
                 from source/service.h:3,
                 from source/graphics.h:3,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/bits/stl_pair.h: In instantiation of 'constexpr std::pair<typename std::__strip_reference_wrapper<typename std::decay<_Tp>::type>::__type, typename std::__strip_reference_wrapper<typename std::decay<_Tp2>::type>::__type> std::make_pair(_T1&&, _T2&&) [with _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles; typename std::__strip_reference_wrapper<typename std::decay<_Tp2>::type>::__type = gin::RenderPlugins::Handles; typename std::__strip_reference_wrapper<typename std::decay<_Tp>::type>::__type = std::__cxx11::basic_string<char>]':
source/graphics.cpp:53:132:   required from here
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: error: no matching function for call to 'std::pair<std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::pair(std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles)'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:452:9: note: candidate: 'template<class ... _Args1, long unsigned int ..._Indexes1, class ... _Args2, long unsigned int ..._Indexes2> std::pair<_T1, _T2>::pair(std::tuple<_Args1 ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2 ...>) [with _Args1 = {_Args1 ...}; long unsigned int ..._Indexes1 = {_Indexes1 ...}; _Args2 = {_Args2 ...}; long unsigned int ..._Indexes2 = {_Indexes2 ...}; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  452 |         pair(tuple<_Args1...>&, tuple<_Args2...>&,
      |         ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:452:9: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'std::__cxx11::basic_string<char>' is not derived from 'std::tuple<_Tps ...>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:387:9: note: candidate: 'template<class ... _Args1, class ... _Args2> std::pair<_T1, _T2>::pair(std::piecewise_construct_t, std::tuple<_Args1 ...>, std::tuple<_Args2 ...>) [with _Args1 = {_Args1 ...}; _Args2 = {_Args2 ...}; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  387 |         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
      |         ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:387:9: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'gin::RenderPlugins::Handles' is not derived from 'std::tuple<_Tps ...>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:381:21: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_MoveConstructiblePair<_U1, _U2>() && (! std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ImplicitlyMoveConvertiblePair<_U1, _U2>())), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(std::pair<_U1, _U2>&&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && (! std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>())), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  381 |  explicit constexpr pair(pair<_U1, _U2>&& __p)
      |                     ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:381:21: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'std::__cxx11::basic_string<char>' is not derived from 'std::pair<_T1, _T2>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:371:12: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(std::pair<_U1, _U2>&&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  371 |  constexpr pair(pair<_U1, _U2>&& __p)
      |            ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:371:12: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'std::__cxx11::basic_string<char>' is not derived from 'std::pair<_T1, _T2>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:361:21: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(_MoveConstructiblePair<_U1, _U2>() && (! _ImplicitlyMoveConvertiblePair<_U1, _U2>())), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(_U1&&, _U2&&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && (! std::_PCC<true, _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>())), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  361 |  explicit constexpr pair(_U1&& __x, _U2&& __y)
      |                     ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:361:21: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:360:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  360 |                          bool>::type=false>
      |                                      ^~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:352:12: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(_MoveConstructiblePair<_U1, _U2>() && _ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(_U1&&, _U2&&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_MoveConstructiblePair<_U1, _U2>() && std::_PCC<true, _T1, _T2>::_ImplicitlyMoveConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  352 |  constexpr pair(_U1&& __x, _U2&& __y)
      |            ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:352:12: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:351:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  351 |                          bool>::type=true>
      |                                      ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:343:17: note: candidate: 'template<class _U2, typename std::enable_if<_CopyMovePair<false, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, _U2>(), bool>::type <anonymous> > std::pair<_T1, _T2>::pair(const _T1&, _U2&&) [with _U2 = _U2; typename std::enable_if<std::_PCC<true, _T1, _T2>::_CopyMovePair<false, _T1, _U2>(), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  343 |        explicit pair(const _T1& __x, _U2&& __y)
      |                 ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:343:17: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:342:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  342 |                          bool>::type=false>
      |                                      ^~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:336:18: note: candidate: 'template<class _U2, typename std::enable_if<_CopyMovePair<true, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, _U2>(), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(const _T1&, _U2&&) [with _U2 = _U2; typename std::enable_if<std::_PCC<true, _T1, _T2>::_CopyMovePair<true, _T1, _U2>(), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  336 |        constexpr pair(const _T1& __x, _U2&& __y)
      |                  ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:336:18: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:335:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  335 |                          bool>::type=true>
      |                                      ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:329:27: note: candidate: 'template<class _U1, typename std::enable_if<_MoveCopyPair<false, _U1, gin::RenderPlugins::Handles>(), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(_U1&&, const _T2&) [with _U1 = _U1; typename std::enable_if<std::_PCC<true, _T1, _T2>::_MoveCopyPair<false, _U1, _T2>(), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  329 |        explicit constexpr pair(_U1&& __x, const _T2& __y)
      |                           ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:329:27: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:328:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  328 |                          bool>::type=false>
      |                                      ^~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:322:18: note: candidate: 'template<class _U1, typename std::enable_if<_MoveCopyPair<true, _U1, gin::RenderPlugins::Handles>(), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(_U1&&, const _T2&) [with _U1 = _U1; typename std::enable_if<std::_PCC<true, _T1, _T2>::_MoveCopyPair<true, _U1, _T2>(), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  322 |        constexpr pair(_U1&& __x, const _T2& __y)
      |                  ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:322:18: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:321:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  321 |                          bool>::type=true>
      |                                      ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:309:21: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ConstructiblePair<_U1, _U2>() && (! std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ImplicitlyConvertiblePair<_U1, _U2>())), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(const std::pair<_U1, _U2>&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ConstructiblePair<_U1, _U2>() && (! std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ImplicitlyConvertiblePair<_U1, _U2>())), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  309 |  explicit constexpr pair(const pair<_U1, _U2>& __p)
      |                     ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:309:21: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'std::__cxx11::basic_string<char>' is not derived from 'const std::pair<_T1, _T2>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:300:19: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ConstructiblePair<_U1, _U2>() && std::_PCC<((! std::is_same<std::__cxx11::basic_string<char>, _U1>::value) || (! std::is_same<gin::RenderPlugins::Handles, _U2>::value)), std::__cxx11::basic_string<char>, gin::RenderPlugins::Handles>::_ImplicitlyConvertiblePair<_U1, _U2>()), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(const std::pair<_U1, _U2>&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ConstructiblePair<_U1, _U2>() && std::_PCC<((! std::is_same<_T1, _U1>::value) || (! std::is_same<_T2, _U2>::value)), _T1, _T2>::_ImplicitlyConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  300 |         constexpr pair(const pair<_U1, _U2>& __p)
      |                   ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:300:19: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   'std::__cxx11::basic_string<char>' is not derived from 'const std::pair<_T1, _T2>'
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:276:26: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(_ConstructiblePair<_U1, _U2>() && (! _ImplicitlyConvertiblePair<_U1, _U2>())), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(const _T1&, const _T2&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_ConstructiblePair<_U1, _U2>() && (! std::_PCC<true, _T1, _T2>::_ImplicitlyConvertiblePair<_U1, _U2>())), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  276 |       explicit constexpr pair(const _T1& __a, const _T2& __b)
      |                          ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:276:26: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:275:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  275 |                          bool>::type=false>
      |                                      ^~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:266:17: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<(_ConstructiblePair<_U1, _U2>() && _ImplicitlyConvertiblePair<_U1, _U2>()), bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair(const _T1&, const _T2&) [with _U1 = _U1; _U2 = _U2; typename std::enable_if<(std::_PCC<true, _T1, _T2>::_ConstructiblePair<_U1, _U2>() && std::_PCC<true, _T1, _T2>::_ImplicitlyConvertiblePair<_U1, _U2>()), bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  266 |       constexpr pair(const _T1& __a, const _T2& __b)
      |                 ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:266:17: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:265:38: error: no type named 'type' in 'struct std::enable_if<false, bool>'
  265 |                          bool>::type=true>
      |                                      ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:245:26: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<std::__and_<std::is_default_constructible<_U1>, std::is_default_constructible<_Dp>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>, std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair() [with _U1 = _U1; _U2 = _U2; typename std::enable_if<std::__and_<std::is_default_constructible<_U1>, std::is_default_constructible<_U2>, std::__not_<std::__and_<std::__is_implicitly_default_constructible<_U1>, std::__is_implicitly_default_constructible<_U2> > > >::value, bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  245 |       explicit constexpr pair()
      |                          ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:245:26: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   candidate expects 0 arguments, 2 provided
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:232:26: note: candidate: 'template<class _U1, class _U2, typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>, std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous> > constexpr std::pair<_T1, _T2>::pair() [with _U1 = _U1; _U2 = _U2; typename std::enable_if<std::__and_<std::__is_implicitly_default_constructible<_U1>, std::__is_implicitly_default_constructible<_U2> >::value, bool>::type <anonymous> = <anonymous>; _T1 = std::__cxx11::basic_string<char>; _T2 = gin::RenderPlugins::Handles]'
  232 |       _GLIBCXX_CONSTEXPR pair()
      |                          ^~~~
/usr/include/c++/10.2.0/bits/stl_pair.h:232:26: note:   template argument deduction/substitution failed:
/usr/include/c++/10.2.0/bits/stl_pair.h:572:14: note:   candidate expects 0 arguments, 2 provided
  572 |       return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
      |              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/c++/10.2.0/memory:83,
                 from /usr/local/include/kelgin/common.h:4,
                 from /usr/local/include/kelgin/async.h:3,
                 from /usr/local/include/kelgin/io.h:3,
                 from source/service.h:3,
                 from source/graphics.h:3,
                 from source/graphics.cpp:1:
/usr/include/c++/10.2.0/bits/unique_ptr.h: In instantiation of 'void std::default_delete<_Tp>::operator()(_Tp*) const [with _Tp = gin::DynamicLibrary::Impl]':
/usr/include/c++/10.2.0/bits/unique_ptr.h:361:17:   required from 'std::unique_ptr<_Tp, _Dp>::~unique_ptr() [with _Tp = gin::DynamicLibrary::Impl; _Dp = std::default_delete<gin::DynamicLibrary::Impl>]'
./common/dynamic.h:19:2:   required from here
/usr/include/c++/10.2.0/bits/unique_ptr.h:83:16: error: invalid application of 'sizeof' to incomplete type 'gin::DynamicLibrary::Impl'
   83 |  static_assert(sizeof(_Tp)>0,
      |                ^~~~~~~~~~~
scons: *** [source/graphics.os] Error 1
